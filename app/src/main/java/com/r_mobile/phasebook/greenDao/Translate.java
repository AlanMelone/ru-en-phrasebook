package com.r_mobile.phasebook.greenDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table Translations.
 */
public class Translate {

    private Long id;
    private String language;
    private String transcription;
    private String content;
    private Long phraseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TranslateDao myDao;

    private Phrase phrase;
    private Long phrase__resolvedKey;


    public Translate() {
    }

    public Translate(Long id) {
        this.id = id;
    }

    public Translate(Long id, String language, String transcription, String content, Long phraseId) {
        this.id = id;
        this.language = language;
        this.transcription = transcription;
        this.content = content;
        this.phraseId = phraseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTranslateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public String getTranscription() {
        return transcription;
    }

    public void setTranscription(String transcription) {
        this.transcription = transcription;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Long getPhraseId() {
        return phraseId;
    }

    public void setPhraseId(Long phraseId) {
        this.phraseId = phraseId;
    }

    /** To-one relationship, resolved on first access. */
    public Phrase getPhrase() {
        Long __key = this.phraseId;
        if (phrase__resolvedKey == null || !phrase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhraseDao targetDao = daoSession.getPhraseDao();
            Phrase phraseNew = targetDao.load(__key);
            synchronized (this) {
                phrase = phraseNew;
            	phrase__resolvedKey = __key;
            }
        }
        return phrase;
    }

    public void setPhrase(Phrase phrase) {
        synchronized (this) {
            this.phrase = phrase;
            phraseId = phrase == null ? null : phrase.getId();
            phrase__resolvedKey = phraseId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
